trigger:
  branches:
    include:
    - master
    - pipeline-with-tests
  paths:
    exclude:
    - README.md

pool:
  vmImage: 'ubuntu-latest'

variables:
  GOBIN:  '$(GOPATH)/bin' # Go binaries path
  GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path\
  MODULEPATH: '$(GOPATH)/$(build.repository.name)'

steps:
- task: GoTool@0
  displayName: 'Using Go v1.13'
  inputs:
    version: '1.13'
    GOPATH: '$(GOPATH)'
    GOBIN: '$(GOBIN)'
    
- task: Go@0
  displayName: 'Resolving Dependencies'
  inputs:
    arguments: '-d'
    workingDirectory: '$(System.DefaultWorkingDirectory)'

- task: Go@0
  displayName: 'Building Abstrakt'
  inputs:
    command: build
    arguments: '-o "$(Build.Repository.Name)"'
    workingDirectory: '$(System.DefaultWorkingDirectory)'

- script: |
    make lint-all
    make test-export-all
  displayName: 'Lint and Test Abstrakt'
  workingDirectory: '$(MODULEPATH)'
  env: { GOPTH: '$(GOPATH)' }

- task: PublishTestResults@2
  inputs:
    testRunner: JUnit
    testResultsFiles: $(System.DefaultWorkingDirectory)/**/report.xml

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: Cobertura 
    summaryFileLocation: $(System.DefaultWorkingDirectory)/**/coverage.xml
    reportDirectory: $(System.DefaultWorkingDirectory)/**/coverage

- task: ArchiveFiles@2
  displayName: 'Archive Files'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  inputs:
    rootFolderOrFile: '$(Build.Repository.LocalPath)/$(Build.Repository.Name)'
    includeRootFolder: false

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  inputs:
    artifactName: drop
